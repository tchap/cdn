// Code generated by capnpc-go. DO NOT EDIT.

package messages

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type HttpLogRecord capnp.Struct

// HttpLogRecord_TypeID is the unique identifier for the type HttpLogRecord.
const HttpLogRecord_TypeID = 0xc5c66f22213ada4b

func NewHttpLogRecord(s *capnp.Segment) (HttpLogRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 4})
	return HttpLogRecord(st), err
}

func NewRootHttpLogRecord(s *capnp.Segment) (HttpLogRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 4})
	return HttpLogRecord(st), err
}

func ReadRootHttpLogRecord(msg *capnp.Message) (HttpLogRecord, error) {
	root, err := msg.Root()
	return HttpLogRecord(root.Struct()), err
}

func (s HttpLogRecord) String() string {
	str, _ := text.Marshal(0xc5c66f22213ada4b, capnp.Struct(s))
	return str
}

func (s HttpLogRecord) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HttpLogRecord) DecodeFromPtr(p capnp.Ptr) HttpLogRecord {
	return HttpLogRecord(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HttpLogRecord) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HttpLogRecord) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HttpLogRecord) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HttpLogRecord) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HttpLogRecord) TimestampEpochMilli() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s HttpLogRecord) SetTimestampEpochMilli(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s HttpLogRecord) ResourceId() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s HttpLogRecord) SetResourceId(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s HttpLogRecord) BytesSent() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s HttpLogRecord) SetBytesSent(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s HttpLogRecord) RequestTimeMilli() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s HttpLogRecord) SetRequestTimeMilli(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s HttpLogRecord) ResponseStatus() uint16 {
	return capnp.Struct(s).Uint16(32)
}

func (s HttpLogRecord) SetResponseStatus(v uint16) {
	capnp.Struct(s).SetUint16(32, v)
}

func (s HttpLogRecord) CacheStatus() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HttpLogRecord) HasCacheStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HttpLogRecord) CacheStatusBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HttpLogRecord) SetCacheStatus(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s HttpLogRecord) Method() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s HttpLogRecord) HasMethod() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s HttpLogRecord) MethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s HttpLogRecord) SetMethod(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s HttpLogRecord) RemoteAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s HttpLogRecord) HasRemoteAddr() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s HttpLogRecord) RemoteAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s HttpLogRecord) SetRemoteAddr(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s HttpLogRecord) Url() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s HttpLogRecord) HasUrl() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s HttpLogRecord) UrlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s HttpLogRecord) SetUrl(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// HttpLogRecord_List is a list of HttpLogRecord.
type HttpLogRecord_List = capnp.StructList[HttpLogRecord]

// NewHttpLogRecord creates a new list of HttpLogRecord.
func NewHttpLogRecord_List(s *capnp.Segment, sz int32) (HttpLogRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 4}, sz)
	return capnp.StructList[HttpLogRecord](l), err
}

// HttpLogRecord_Future is a wrapper for a HttpLogRecord promised by a client call.
type HttpLogRecord_Future struct{ *capnp.Future }

func (f HttpLogRecord_Future) Struct() (HttpLogRecord, error) {
	p, err := f.Future.Ptr()
	return HttpLogRecord(p.Struct()), err
}

const schema_f42cd342ff520eca = "x\xdaL\xcc?k\x14A\x1c\xc6\xf1\xe7\x99\xd9\xcd\xe6" +
	"\xe0\x94\x1c;\x82\x85B\x12\x14\"\x9c\x86\x03\x0b\xb9\xe6" +
	"T\x10\x14\x0d\xb87Vid\xb3;\xdc-\xec?w" +
	"\xe6\x0a\xf3\x12|\x19\xbe\x11\xabX\xd8J\x0a}\x0f\x82" +
	"\x85\x85\x8202\xc5I\xba\xe7\xf7\xe1\xcbo\xef\xf2q" +
	"4\xbb\xf6\x89\x10\x99\x8aw\xfc\xcb\xef\xf3\x83\xc3\xee\xf3" +
	"\x05\xb2\x03\xc6\xfe\xcb\xf5\xa5\x7f\xfau\xfa\x0bq\x94\x00" +
	"\xb3\x8bsN\xbe\x85q\xe9\x89\xfb\xbej\x9d\x19\xda\xbc" +
	"\x8e\x8e\x1bcm\xbe2\xf6x\xed\\\xff\xb6\xeeV\x0f" +
	"\x8a\xbco\xfb\xf9s\xe7\xfaW\xddj\xb14E7\x94" +
	"\xaf\xc9\xec\x8e\x8c\x80\x88\xc0\xe4\xc7G \xfb)\x99\xfd" +
	"\x15\x9c\x90\x8a\x01\xff\x9c\x02\xd9oI\x1dQp\"\x84" +
	"\xa2\x00Rr\x09,)\xa9\xc7\x81\xa5T\x94@:\xe2" +
	"\x07@\x8f\x83\xdf\x0c\x1e\xed)F@z\x83\xe7\x80V" +
	"\xc1\xf7)\xc8X1\x06\xd2\xdb<\x03\xf4\xad\xc0G!" +
	"\xdf\xa1\xe2\x0e\x90\xde\xe5\x1c\xd0\xfb\xc1\xa7\xc1\x13\xa1\x98" +
	"\x00\xe9=\x9e\x02\xfa(\xf8\xc3\xe0\xbbRq\x17Hg" +
	"<\x04\xf44\xf8#\x0azW5\xc6\xba\xbca\xff\xac" +
	"\xef\x8a\xf5I\x95\xd4u\xc5\x11\x04G\xa0\x1f\x8c\xed6" +
	"Ca _\x94\xff\xf1\xec\xbd3V\x9b\x16tW\xc2" +
	"w\x1bc\xdd\x1bV\x8d9\xa9\xea\xba\x02\xae>\xe9\xbb" +
	"\xd6\x1a,\xb4\xcb\xdd\xc62\x81`\x02\xfa\"/\xd6F" +
	"\xbb\x1cI\xd01\x04\xc7\xe0\xa21n\xdd\x95\xdb\xd3\x0f" +
	"\xa6\xe9\x9cyRB\x96\xc3\x16\x93\xcdPo\xf7\xbf\x00" +
	"\x00\x00\xff\xff\xb5Ti\xa6"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f42cd342ff520eca,
		Nodes: []uint64{
			0xc5c66f22213ada4b,
		},
		Compressed: true,
	})
}
